// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inject.proto

package timechaos

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Pid                  uint32   `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Tid                  bool     `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	Sec                  int32    `protobuf:"varint,3,opt,name=sec,proto3" json:"sec,omitempty"`
	Usec                 int32    `protobuf:"varint,4,opt,name=usec,proto3" json:"usec,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_28dc219aa0c974f7, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Request) GetTid() bool {
	if m != nil {
		return m.Tid
	}
	return false
}

func (m *Request) GetSec() int32 {
	if m != nil {
		return m.Sec
	}
	return 0
}

func (m *Request) GetUsec() int32 {
	if m != nil {
		return m.Usec
	}
	return 0
}

func init() {
	proto.RegisterType((*Request)(nil), "timechaos.Request")
}

func init() { proto.RegisterFile("inject.proto", fileDescriptor_28dc219aa0c974f7) }

var fileDescriptor_28dc219aa0c974f7 = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xcc, 0xcb, 0x4a,
	0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x2c, 0xc9, 0xcc, 0x4d, 0x4d, 0xce,
	0x48, 0xcc, 0x2f, 0x96, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x4b, 0x24, 0x95,
	0xa6, 0xe9, 0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0xd4, 0x29, 0x05, 0x73, 0xb1, 0x07, 0xa5, 0x16,
	0x96, 0xa6, 0x16, 0x97, 0x08, 0x09, 0x70, 0x31, 0x17, 0x64, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a,
	0xf0, 0x06, 0x81, 0x98, 0x20, 0x91, 0x92, 0xcc, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x8e, 0x20,
	0x10, 0x13, 0x24, 0x52, 0x9c, 0x9a, 0x2c, 0xc1, 0xac, 0xc0, 0xa8, 0xc1, 0x1a, 0x04, 0x62, 0x0a,
	0x09, 0x71, 0xb1, 0x94, 0x82, 0x84, 0x58, 0xc0, 0x42, 0x60, 0xb6, 0x51, 0x2d, 0x17, 0x9b, 0x27,
	0xd8, 0x31, 0x42, 0x56, 0x5c, 0x5c, 0xc1, 0xa9, 0x25, 0x21, 0x99, 0xb9, 0xa9, 0x65, 0x89, 0x39,
	0x42, 0x42, 0x7a, 0x70, 0x57, 0xe9, 0x41, 0x6d, 0x95, 0x12, 0xd3, 0x83, 0x38, 0x4f, 0x0f, 0xe6,
	0x3c, 0x3d, 0x57, 0x90, 0xf3, 0x94, 0x18, 0x84, 0xcc, 0x41, 0x4e, 0x4b, 0xce, 0x2f, 0x4b, 0x2d,
	0x22, 0x4d, 0x63, 0x12, 0x1b, 0x58, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x13, 0xd1,
	0x98, 0x12, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InjectClient is the client API for Inject service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InjectClient interface {
	SetTimeval(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	Recover(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
}

type injectClient struct {
	cc grpc.ClientConnInterface
}

func NewInjectClient(cc grpc.ClientConnInterface) InjectClient {
	return &injectClient{cc}
}

func (c *injectClient) SetTimeval(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/timechaos.Inject/SetTimeval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *injectClient) Recover(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/timechaos.Inject/Recover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InjectServer is the server API for Inject service.
type InjectServer interface {
	SetTimeval(context.Context, *Request) (*empty.Empty, error)
	Recover(context.Context, *Request) (*empty.Empty, error)
}

// UnimplementedInjectServer can be embedded to have forward compatible implementations.
type UnimplementedInjectServer struct {
}

func (*UnimplementedInjectServer) SetTimeval(ctx context.Context, req *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTimeval not implemented")
}
func (*UnimplementedInjectServer) Recover(ctx context.Context, req *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recover not implemented")
}

func RegisterInjectServer(s *grpc.Server, srv InjectServer) {
	s.RegisterService(&_Inject_serviceDesc, srv)
}

func _Inject_SetTimeval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectServer).SetTimeval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timechaos.Inject/SetTimeval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectServer).SetTimeval(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inject_Recover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InjectServer).Recover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/timechaos.Inject/Recover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InjectServer).Recover(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Inject_serviceDesc = grpc.ServiceDesc{
	ServiceName: "timechaos.Inject",
	HandlerType: (*InjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetTimeval",
			Handler:    _Inject_SetTimeval_Handler,
		},
		{
			MethodName: "Recover",
			Handler:    _Inject_Recover_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inject.proto",
}
